par(mfrow = c(1,2), mar = c(5,4,2,1))
west<- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main=main = "Old Faithful Geyser data")
title(main = "Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main = "Old Faithful Geyser data")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed,dist))
text(mean(cars$speed), mean(cars$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income|region, data = state, layout=c(4,1))
xyplot(Life.Exp~Income|region, data = state, layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot
qplot(displ, hwy, data=mpg)
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone~Month, airquality)
boxplot(Ozone~Month, airquality, xlab="Month", ylab = "Ozone (ppb)")
boxplot(Ozone~Month, airquality, xlab="Month", ylab = "Ozone (ppb)", col.axis = "blue", col.lab= "red")
main = title("Ozone and Wind in New York City")
main("Ozone and Wind in New York City")
title(main=("Ozone and Wind in New York City"))
title(main="Ozone and Wind in New York City")
with(airquality, plot(airquality$Wind))
with(airquality, plot(Wind, Ozone))
title(main="Ozone and Wind in New York City")
length(par())
names(par())
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- subset(airquality, Month=="5")
may <- subset(airquality, Month==5)
points(may$Wind, may$Ozone, pch = 17, col="blue")
points(may$Wind, may$Ozone,col="blue", pch = 17)
notmay<- subset(airquality, Month!=5)
points(notmay$Wind, notmay$Ozone, col="red",pch=8)
legend("topright",pch=c(17,8), col = c("blue","red"), legend = c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2, lwd = 2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = title("Ozone and Wind"))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar = c(4,4,2,1), oma = c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
head(airquality)
xyplot(Ozone~Wind, data= airquality)
xyplot(Ozone~Wind, data= airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone~Wind, data= airquality, pch = 8, col = "red", main = "Big Apple Data")
xyplot(Ozone~Wind|as.factor(Month), data= airquality, layout = c(5,1))
xyplot(Ozone~Wind|Month, data= airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind, data= airquality)
p
names(p)
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
xyplot(y~x|f, layout = c(2,1))
v1
v2
myedit("plot1.R")
source(pathtofile("plot1.R"),local = TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local = TRUE)
str(diamonds)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local = TRUE)
xyplot(price~carat|color*cut, data= diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price~carat|color*cut, data= diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
library(swirl)
swirl()
sample(colors(), 10)
pal<- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1<- colorRampPalette(c("red","blue"))
p1(2)
p1(6)
0xCC
p2<0 colorRampPalette("red","yellow")
p2<0 colorRampPalette(c("red","yellow"))
p2<- colorRampPalette(c("red","yellow"))
p2(2)
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3<- colorRampPalette(c("blue","green"))
p3<- colorRampPalette(c("blue","green"), alpha = 0.5)
p3(5)
plot(x,y,pch=19, col = rgb(0,.5,.5))
plot(x,y,pch=19, col = rgb(0,.5,.5), alpha = 0.3)
plot(x,y,pch=19, col = rgb(0,.5,.5,.3))
cols <- brewer.pal(3,"BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col = pal (20))
image(volcano, col = p1(20))
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ,hwy, mpg)
qplot(displ,hwy, data = mpg)
qplot(displ,hwy, data = mpg, color = drv)
qplot(displ,hwy, data = mpg, color = drv, gepm = c("point","smooth"))
qplot(displ,hwy, data = mpg, color = drv, geom = c("point","smooth"))
qplot(hwy, data = mpg, color = drv)
qplot(y=hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = .~drv)
qplot(hwy, data = mpg, facets = drv~.., binwidth = 2)
qplot(hwy, data = mpg, facets = drv~., binwidth = 2)
qplot(displ, hyw, data = mpg, geom = c("point", "smooth"), facets = .~drv)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = .~drv)
g<- ggplot(mpg, aes(displ,hwy))
g
summary(g)
g+geom_point()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth("lm")
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+ facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+ facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth(col = "pink", size = 4, alpha = 1/2)+ facet_grid(.~drv)+ggtitle("Swirl Rules!")
g+geom_point()+geom_smooth(col = "pink", size = 4, alpha = 1/2)
g+geom_point(col = "pink", size = 4, alpha = 1/2)
g+ geom_point(color = "pnk", size = 4, alpha = 1/2)
g+ geom_point(color = "pink", size = 4, alpha = 1/2)
g+ geom_point(size = 4, alpha = 1/2, aes(color = drv))
g+geom_point(aes(color = drv))+ labs(title = "Swirl Rules!")+ labs(x="Displacement", y= "Hwy Mileage")
g+geom_point(color = drv, size=2, alpha = 1/2)+ geom_smooth(size=4, lty=3, method = "lm", se= FALSE)
g+geom_point(aes(color = drv), size=2, alpha = 1/2)+ geom_smooth(size=4, lty=3, method = "lm", se= FALSE)
g+geom_point(aes(color = drv), size=2, alpha = 1/2)+ geom_smooth(size=4, linetype=3, method = "lm", se= FALSE)
g+geom_point(aes(color = drv), theme_bw(base_family = "Times"))
g+geom_point(aes(color = drv))+ theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g<- ggplot(data = testdat, aes(x=myx, y= myy))
g(0)+ geom_line()
g+ geom_line()
g+ geom_line()+ylim(-3,3)
g+ geom_line()+coord_cartesian(ylim = c(-3,3))
g<- ggplot(data = testdat, aes(x-displ,y=hwy,color=factor(year)))
g<- ggplot(data = mpg, aes(x=displ,y=hwy,color=factor(year)))
g+ geom_point()
g+ geom_point()+facet_grid(drv~cyl,margins = TRUE)
g+ geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method = "lm", se= FALSE, size =2, color = "black")
g+ geom_point()+facet_grid(drv~cyl,margins = TRUE)+geom_smooth(method = "lm", se= FALSE, size =2, color = "black")+ labs(x="Displacement", y= "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill=cut)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method = "lm")+facets=.~cut()
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method = "lm")+facets=.~cut
qplot(carat, price, data = diamonds, color = cut)+ geom_smooth(method = "lm")
qplot(carat, price, data = diamonds, color = cut, facets = .~cut)+ geom_smooth(method = "lm")
g<- ggplot(diamonds, aes(depth,price))
summary(g)
g+ geom_point(alpha=1/3)
cutpoints<- quantile(diamonds$carat, seq(0,1,length=4), na.rm = TRUE)
cutpoints
diamonds$car2<- cut(diamonds$carat, cutpoints)
g<- ggplot(diamonds, aes(depth, price))
g+geom_point(alpha = 1/3, facet_grid(cut~car2))
g+geom_point(alpha = 1/3)+ facet_grid(cut~car2)
diamonds[myd,]
g+geom_point(alpha = 1/3)+ facet_grid(cut~car2)+geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price))+ geom_boxplot()+ facet_grid(.~cut)
library(swirl)
swirl()
library(swirl)
swirl()
swirl()
dist()
exit()
0
info()
bye)_
bye()
library(swirl)
swirl()
swirl()
library(swirl)
swirl()
dist(dataFrame)
hclust(distxy)
hc<- hclust(distxy)
hc
plot(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=0.4, col = "red")
5
11
12
abline(h=0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
bye()
library(swirl)
anusha\
swirl()
swirl()
dist(dataFrame)
hc<- hlcust(distxy)
hc<- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5, col = "blue")
abline(h=.4, col = "red")
12
5
12
abline(h=0.05, col = "green")
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
mt
plot(demt)
plot(denmt)
distmt
library(swirl)
swirl()
library(swirl)
swirl()
cmat
points(cx,cy, col = c("red","orange","purple"), pch =3, cex = 2, lwd = 2)
mdist(x,y,cx,cy)
apply(distTmp, 2, which.min)
points(x,y,pch=19,cex=2, col = cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx, newCy, col = cols1, pch =8, cex = 2, lwd = 2)
mdist(x,y,newCx, newCy)
apply(distTmp2,2, which.min)
points(x,y,pch=19,cex=2, col = cols1[newClust2])
tapply(x,newClust2,mean)
tapply(,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9, cex=2, lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmObj$cluster,pch=19, cex=2)
points(kmObj$centers, col = c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu%*%diag%*%t(matv)
svd(mat)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix)
svd2$d
svd2$v[2,1]
svd2$v[,1:2]
svd2$d
dim(faceData)
a1<-(svd1$u[,1])%*%(svd1$d[1])
a1<-(svd1$u[,1])%*%(svd1$v[,1])%*%(svd1$d[1])
a1<-(svd1$u[,1]*svd1$d[1])%*%t(svd1$v[,1])
myImage(a1)
a2<- (svd1$u[,1:2]*svd1$d[1])%*%t(svd1$v[,1:2])
a2<- (svd1$u[,1:2]%*%svd1$d[,1:2])%*%t(svd1$v[,1:2])
a2<- svd1$u[,1:2]%*%diag(svd1$d[,1:2])%*%t(svd1$v[,1:2])
a2<- svd1$u[,1:2]%*%diag(svd1$d[1:2])%*%t(svd1$v[,1:2])
myImage(a2)
myImage(svd1$u[,1:5]%*%diag(svd1$d[1:5])%*%t(svd1$v[,1:5]))
myImage(svd1$u[,1:10]%*%diag(svd1$d[1:10])%*%t(svd1$v[,1:10]))
library(swirl)
swirl()
library(swirl)
swirl()
exit
0
info()
bye()
swirl()
library(swirl)
swirl()
dim(ssd)
names(ssd[,562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1<- subset(ssd,subject == 1)
dim(sub1)
names(sub1[,1:12])
myedit("showXY.R")
showMe(1:6)
mdist<- dist(sub1[,1:3])
hclustering<- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
mdist<- dist(sub1[,10:12])
hclustering<- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
svd1<- svd(scale(sub1[,-c(562,563)]))
dim(svd1$u)
maxCon<- which.max(svd1$v)
maxCon<- which.max(svd1$v[,2])
mdist<- dist(sub1[,10:12])
mdist<- dist(sub1[,c(10:12,maxCon)])
hclustering<- hclust(mdist)
myplclust(hclustering,lab.col = unclass(sub1$activity))
names(sub1[maxCon])
kClust<- kmeans(sub1[,-c(562:563)],kmean)
kClust<- kmeans(sub1[,-c(562:563)],centers = 6)
table(kClust$cluster,sub1$activity)
kClust<- kmeans(sub1[,-c(562:563)],centers = 6,nstart = 100)
table(kClust$cluster,sub1$activity)
dim(kClust$cluster)
dim(kClust$centers)
laying<- which(kClust$siz)
laying<- which(kClust$size==29)
plot(kClust$centers[laying,1:12],pch=19,ylab="Laying Cluster")
names(sub1[,1:3])
walkdown<- which(kClust$size==49)
plot(kClust$centers[walkdown,1:12],pch=19,ylab="Walkdown Cluster")
library(swirl)
swirl()
bye()
getwd()
setwd("./Documents/RR/week 2")
getwd()
library(ggplot2)
#Reading in the data file
act.dat<- read.csv("activity.csv")
actdat.tidy<- na.omit(act.dat)
#Part 1: Finding the total number of steps taken in a day
q1.sum<- aggregate(steps~date,actdat.tidy,sum)
#Plotting the histogram of total number of steps taken in a day
hist(q1.sum$steps, xlab = "Frequency", ylab = "Number
library(ggplot2)
#Reading in the data file
act.dat<- read.csv("activity.csv")
actdat.tidy<- na.omit(act.dat)
#Part 1: Finding the total number of steps taken in a day
q1.sum<- aggregate(steps~date,actdat.tidy,sum)
#Plotting the histogram of total number of steps taken in a day
hist(q1.sum$steps, xlab = "Frequency", ylab = "Number of steps in a day", main = "Total steps taken per day (Tidy data)")
#Finding the mean and median
q1.mean<- mean(q1.sum$steps)
q1.median<- median(q1.sum$steps)
#Part 2: Finding the average number of steps taken in a day during an interval
q2avg<- with(actdat.tidy,tapply(steps,interval,mean))
intervals<- act.dat.tidy$interval
q2mean<-as.data.frame(cbind(intervals,q2avg))
plot(q2mean$intervals, q2mean$q2avg, type = "l", xlab = "Intervals", ylab = "average steps", main = "Average number of steps taken per interval")
maxsteps<- max(q2avg)
max.int<- q2mean[(q2mean$q2avg==maxsteps),]$intervals
q2avg<- with(actdat.tidy,tapply(steps,interval,mean))
intervals<- actdat.tidy$interval
q2mean<-as.data.frame(cbind(intervals,q2avg))
plot(q2mean$intervals, q2mean$q2avg, type = "l", xlab = "Intervals", ylab = "average steps", main = "Average number of steps taken per interval")
maxsteps<- max(q2avg)
max.int<- q2mean[(q2mean$q2avg==maxsteps),]$intervals
max.int
#Part 3: Filling in the missing values
#1) finding the total number of NAs
sum.na<- sum(is.na(act.dat))
#2) Fill in missing values with average values
k1<- dim(act.dat)
q1.means<- aggregate(steps~date,act.dat, mean, na.action = NULL)
avg.steps<- mean(act.dat$steps, na.rm = TRUE)
q1.means[is.na(q1.means)]<- avg.steps
k2<- dim(q1.means)
for (x in 1:k1[1]){
temp1<- act.dat[x,1]
for (y in 1:k2[1]){
if ((is.na(temp1))&&(act.dat[x,2]==q1.means[y,1])) act.dat[x,1]<- q1.means[y,2]
}
}
# histogram of total number of steps taken per day
sum_updated<- aggregate(steps~date,act.dat,sum)
hist(sum_updated, xlab = "Frequency", ylab = "Number of steps in a day", main = "Total steps taken")
#3) recalculate the mean and median
q1.mean.updated<- mean(sum_updated$steps)
q1.median.updated <- mean(sum_updated$steps)
hist(sum_updated$steps, xlab = "total steps", y= "frequency", main = title("Frequency of total steps per day"))
#4) Comparing average steps taken (per interval) during Weekends and weekdays
sum_updated<- aggregate(steps~date,act.dat,sum)
hist(sum_updated$steps, xlab = "Frequency", ylab = "Number of steps in a day", main = "Total steps taken")
#3) recalculate the mean and median
q1.mean.updated<- mean(sum_updated$steps)
q1.median.updated <- mean(sum_updated$steps)
hist(sum_updated$steps, xlab = "total steps", y= "frequency", main = title("Frequency of total steps per day"))
#4) Comparing average steps taken (per interval) during Weekends and weekdays
hist(sum_updated$steps, xlab = "Frequency", ylab = "Number of steps in a day", main = title("Plot 3"))
#3) recalculate the mean and median
q1.mean.updated<- mean(sum_updated$steps)
q1.median.updated <- mean(sum_updated$steps)
hist(sum_updated$steps, xlab = "total steps", y= "frequency", main = title("Plot 4"))
#4) Comparing average steps taken (per interval) during Weekends and weekdays
wd<- weekdays(as.Date(act.dat$date))
# adding a new column named daycol with 2 levels: weekday/weekend
for (i in 1:k1[1]){
daycol[i]<- if (wd[i]=="Sunday") "weekend" else if (wd[i]=="Saturday") "weekend" else "weekday"
}
act.dat<- cbind(act.dat,daycol)
activity_day<- aggregate(steps~interval + daycol, act.dat, mean)
dayplot<- ggplot(activity_day, aes(x = interval, y = steps, color = daycol))+geom_line()+labs (x = "Interval", y = "avg steps", title = "Average steps per interval: weekdays vs weekdays")
print(dayplot)
act.dat<- cbind(act.dat,daycol)
library(ggplot2)
activity_day<- aggregate(steps~interval + daycol, act.dat, mean)
dayplot<- ggplot(activity_day, aes(x = interval, y = steps, color = daycol))+geom_line()+labs (x = "Interval", y = "avg steps", title = "Average steps per interval: weekdays vs weekdays")
print(dayplot)
library(ggplot2)
activity_day<- aggregate(steps~interval + daycol, act.dat, mean)
dayplot<- ggplot(activity_day, aes(x = interval, y = steps, color = daycol))+geom_line()+labs (x = "Interval", y = "avg steps", title = "Average steps per interval: weekdays vs weekdays")
wd<- weekdays(as.Date(act.dat$date))
# adding a new column named daycol with 2 levels: weekday/weekend
for (i in 1:k1[1]){
daycol[i]<- if (wd[i]=="Sunday") "weekend" else if (wd[i]=="Saturday") "weekend" else "weekday"
}
act.dat<- cbind(act.dat,daycol)
library(ggplot2)
activity_day<- aggregate(steps~interval + daycol, act.dat, mean)
dayplot<- ggplot(activity_day, aes(x = interval, y = steps, color = daycol))+geom_line()+labs (x = "Interval", y = "avg steps", title = "Average steps per interval: weekdays vs weekdays")
print(dayplot)
wd<- weekdays(as.Date(act.dat$date))
# adding a new column named daycol with 2 levels: weekday/weekend
for (i in 1:k1[1]){
daycol[i]<- if (wd[i]=="Sunday") "weekend" else if (wd[i]=="Saturday") "weekend" else "weekday"
}
act.dat<- cbind(act.dat,daycol)
library(ggplot2)
activity_day<- aggregate(steps~interval + daycol, act.dat, mean)
dayplot<- ggplot(activity_day, aes(x = interval, y = steps, color = daycol))+geom_line()+labs (x = "Interval", y = "avg steps", title = "Average steps per interval: weekdays vs weekdays")
print(dayplot)
wd<- weekdays(as.Date(act.dat$date))
daycol<- vector()
# adding a new column named daycol with 2 levels: weekday/weekend
for (i in 1:k1[1]){
daycol[i]<- if (wd[i]=="Sunday") "weekend" else if (wd[i]=="Saturday") "weekend" else "weekday"
}
act.dat<- cbind(act.dat,daycol)
library(ggplot2)
activity_day<- aggregate(steps~interval + daycol, act.dat, mean)
dayplot<- ggplot(activity_day, aes(x = interval, y = steps, color = daycol))+geom_line()+labs (x = "Interval", y = "avg steps", title = "Average steps per interval: weekdays vs weekdays")
print(dayplot)
summary(act.dat)
head(act.dat)
q1.mean
print("Mean is",q1.mean)
print(c("Mean is",q1.mean))
print(cat("Mean is",q1.mean))
print(paste0("Mean is",q1.mean))
print(paste0("Mean is ",round(q1.mean,2)))
print("Mean is ",round(q1.mean,2))
